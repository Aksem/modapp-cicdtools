name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]

defaults:
  run:
    shell: bash

jobs:
  CI:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
        python-version: ["3.10"]
        include:
          - os: ubuntu-20.04
            cachepath: /home/runner/.cache/pypoetry/
          - os: macos-11
            cachepath: /Users/runner/Library/Caches/pypoetry/

    steps:
      - uses: actions/checkout@v2

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ${{ matrix.cachepath }}
          key: ${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python${{ matrix.python-version }} -m pip install --upgrade pip
          git clone --depth 1 --single-branch --branch 1.2.0rc2 https://github.com/python-poetry/poetry.git
          pushd poetry
          python${{ matrix.python-version }} install-poetry.py --version 1.2.0a2
          popd
          rm -r poetry
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          if [ "${{ runner.os }}" == "macOS" ]; then
            # is needed for macos to make poetry available
            export PATH="/Users/runner/.local/bin:$PATH"
          fi
          poetry env use ${{ matrix.python-version }}
          poetry install --verbose

      - name: Lint
        run: |
          bash ./lint.sh

      - name: Run unit tests
        if: ${{ !cancelled() }}
        run: |
          poetry env use ${{ matrix.python-version }}
          poetry run python3 -m pytest tests/

      - name: Build
        if: ${{ !cancelled() }}
        run: |
          poetry env use ${{ matrix.python-version }}
          poetry run python -m nuitka modapp_cicdtools/cli.py

      # TODO: save artifacts
